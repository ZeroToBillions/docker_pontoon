version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: pontoon_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: MYSQLpassword_2setting   # 设置 MySQL root 密码
      MYSQL_DATABASE: pontoon_db   # 创建数据库
      MYSQL_USER: pontoon   # 创建用户
      MYSQL_PASSWORD: databasePass_2setting   # 设置用户密码
    volumes:
      - db_data:/var/lib/mysql
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-pMYSQLpassword_2setting"]   # 根据root实际密码修改
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - pontoon-net
    # command: ["--skip-grant-tables","--skip-networking"] 
    ## 数据库无法启动的时候启用该命令
    #1 停止服务docker-compose down
    #2 将command命令启用
    #3 只启动db，命令docker-compose up -d db
    #4 登录MySQL，命令docker exec -it pontoon_db mysql
    #5 运行SQL命令，增加权限：
    # FLUSH PRIVILEGES; #必须先运行
    #
    # -- 然后尝试修改 root 本地账户和创建 root@'%'
    # ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'MYSQLpassword_2setting';
    # CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'MYSQLpassword_2setting';
    # GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
    #
    # -- 确保 pontoon 用户也存在并允许远程连接
    # CREATE USER IF NOT EXISTS 'pontoon'@'%' IDENTIFIED WITH mysql_native_password BY 'databasePass_2setting';
    # GRANT ALL PRIVILEGES ON pontoon_db.* TO 'pontoon'@'%';
    #
    # FLUSH PRIVILEGES;
    # SELECT User,Host,plugin FROM mysql.user\G
    #6 退出MySQL，命令exit
    #7 停止容器，命令docker-compose down
    #8 用注释去除command命令
    #9 重新启动容器，命令docker-compose up -d
    
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: pontoon_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
    ports:
      - "8081:80"   # phpMyAdmin 在宿主的 8081
    depends_on:
      - db
    networks:
      - pontoon-net

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: pontoon_backend
    restart: unless-stopped
    env_file:
      - ./server/.env
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pontoon-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pontoon_frontend
    restart: unless-stopped
    ports:
      - "8080:80"   # 前端通过 nginx 暴露到宿主 80（如宿主已占用，可改 8080:80）
    networks:
      - pontoon-net

volumes:
  db_data:

networks:
  pontoon-net:
    driver: bridge
